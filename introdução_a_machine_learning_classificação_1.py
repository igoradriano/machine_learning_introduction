# -*- coding: utf-8 -*-
"""Introdução_a_Machine_Learning_Classificação_1.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1XlWBwDX3OsVi2O6oz91bXGttyhlztOIN
# **1 - DADOS DE TREINAMENTO**
"""

# features (1 sim, 0 não)
# longo?
# perna curta ?
# faz auau?
porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

cachorro1 = [0, 1, 1]
cachorro2 = [1, 0, 1]
cachorro3 = [1, 1, 1]
# f(x) = y ( função de train_x tem que ser igual a train_y)
# 1 => porco, 0 => cachorro
train_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
train_y = [1,1,1,0,0,0]

"""# **2 - Importando SKLEARN**"""

from sklearn.svm import LinearSVC

model = LinearSVC()
model.fit(train_x, train_y)

"""# **3 - DADOS DE TESTE**"""

animal_misterioso = [1, 1, 1]
model.predict([animal_misterioso]) # resultado 0 é cachorro

misterio1 = [1, 1, 1] # cachorro
misterio2 = [1, 1, 0] # porco
misterio3 = [0, 1, 1] # porco

teste_x = [misterio1, misterio2, misterio3]
teste_y = [0, 1, 1]
model.predict(teste_x) # [cachorro, porco, cachorro] -> errou o ultimo

"""# **Taxa de acerto**"""

previsoes = model.predict(teste_x)
previsoes

previsoes == teste_y

corretos = (previsoes == teste_y).sum()
print(corretos)
total = len(teste_x)
print(total)
taxa_de_acerto = corretos/total
print('Taxa de acerto: ', round(taxa_de_acerto * 100,2),'%')

from sklearn.metrics import accuracy_score
taxa_de_acerto = accuracy_score(teste_y, previsoes)
print('Taxa de acerto: ', round(taxa_de_acerto *100,2),'%' )