# -*- coding: utf-8 -*-
"""Introdução_a_Machine_Learning_Classificação_1.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1XlWBwDX3OsVi2O6oz91bXGttyhlztOIN
# **1 - DADOS DE TREINAMENTO**
"""
#pyinstaller --onefile nome_arquivo.py -> transformar em .exe
#pyinstaller --onefile --noconsole nome_arquivo.py -> transformar em .exe sem console
#pyinstaller --onefile -w nome_arquivo.py -> transformar em .exe com janela UI

# features (1 sim, 0 não)
# --------------------------------------------------
# Animal   | Pelo longo? | Perna curta? | Faz AuAu?|
# Porco    |       0     |       1      |     0    |
# Porco    |       0     |       1      |     1    |
# Porco    |       1     |       1      |     0    |
# Cachorro |       0     |       1      |     1    |
# Cachorro |       1     |       0      |     1    |
# Cachorro |       1     |       1      |     1    |

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
import time
#from tela import text2

def training_model():
    porco1 = [0, 1, 0]
    porco2 = [0, 1, 1]
    porco3 = [1, 1, 0]

    cachorro1 = [0, 1, 1]
    cachorro2 = [1, 0, 1]
    cachorro3 = [1, 1, 1]
    # f(x) = y ( função de train_x tem que ser igual a train_y)
    # 1 => porco, 0 => cachorro
    train_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
    train_y = [1,1,1,0,0,0]

    """# **2 - Importando SKLEARN**"""

    model = LinearSVC()
    model.fit(train_x, train_y)

    """# **3 - DADOS DE TESTE**"""

    animal_misterioso = [1, 1, 1]
    model.predict([animal_misterioso]) # resultado 0 é cachorro

    misterio1 = [1, 1, 1] # cachorro
    misterio2 = [1, 1, 0] # porco
    misterio3 = [0, 1, 1] # porco

    teste_x = [misterio1, misterio2, misterio3]
    teste_y = [0, 1, 1]
    model.predict(teste_x) # [cachorro, porco, cachorro] -> errou o ultimo

    """# **Taxa de acerto**"""
    previsoes = model.predict(teste_x)
    corretos = (previsoes == teste_y).sum()
    total = len(teste_x)
    taxa_de_acerto1 = corretos/total

    taxa_de_acerto2 = accuracy_score(teste_y, previsoes)

    texto = f"""
    Previsões corretas: {corretos} 
    Qtd Total de Testes: {total}
    Taxa de acerto calc: {round(taxa_de_acerto1 *100,2)}%
    Taxa de acerto sklearn: {round(taxa_de_acerto2 * 100,2)}%
    """
    return texto
    # time.sleep(10)